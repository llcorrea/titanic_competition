# -*- coding: utf-8 -*-
"""Titanic_comp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_pZiDRMXscF8V4jcuBWW5Dy8Pa0lhI1f

**Titanic - Machine Learning from Disaster**
"""

import sys
import io
import pdb
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import KFold, RepeatedKFold
from sklearn.linear_model import LogisticRegression
import matplotlib as plt
#from google.colab import files

"""**Loading CSV files into Colab from a local drive**"""


train_data = pd.read_csv('train.csv')  
test_data = pd.read_csv('test.csv')

"""**EDA step**"""

print(train_data.head())
print(test_data.head())
#print(train_data.shape)
#print(train_data.tail())
#print(train_data.columns)
#print(train_data.describe())
print(train_data.info())
#print(train_data.isnull().sum())

"""**Feature Definition**"""

#features = ['Sex_bin', 'Age', 'Pclass', 'SibSp', 'Parch', 'Fare']
#print(train_data['Sex'].value_counts())
#print(train_data['Embarked'].value_counts())

##Transformation of nominal features to numerical features
def sex_to_bin(val):
    if val=='female':
        return 1
    else:
        return 0

def embarked_to_bin(val):
    if val=='S':
        return 0
    elif val=='C':
        return 1
    elif val=='Q':
        return 2

train_data['Sex_bin']=train_data['Sex'].map(sex_to_bin)
test_data['Sex_bin']=test_data['Sex'].map(sex_to_bin)

train_data['Embarked_bin']=train_data['Embarked'].map(embarked_to_bin)
test_data['Embarked_bin']=test_data['Embarked'].map(embarked_to_bin)

#Booleans
train_data['Cabin_null']=train_data['Cabin'].isnull().astype(int) 
test_data['Cabin_null']=test_data['Cabin'].isnull().astype(int)

train_data['Embarked_S']=(train_data['Embarked']=='S').astype(int) 
test_data['Embarked_S']=(test_data['Embarked']=='S').astype(int)

train_data['Embarked_C']=(train_data['Embarked']=='C').astype(int) 
test_data['Embarked_C']=(test_data['Embarked']=='C').astype(int) 

train_data['Name_have_Miss']=train_data['Name'].str.contains('Miss').astype(int)
train_data['Name_have_Mrs']=train_data['Name'].str.contains('Mrs').astype(int)

train_data['Name_have_Mr']=train_data['Name'].str.contains('Mr').astype(int)
train_data['Name_have_Master']=train_data['Name'].str.contains('Master').astype(int)
train_data['Name_have_Col']=train_data['Name'].str.contains('Col').astype(int)
train_data['Name_have_Major']=train_data['Name'].str.contains('Major').astype(int)

test_data['Name_have_Miss']=test_data['Name'].str.contains('Miss').astype(int)
test_data['Name_have_Mrs']=test_data['Name'].str.contains('Mrs').astype(int)

test_data['Name_have_Mr']=test_data['Name'].str.contains('Mr').astype(int)
test_data['Name_have_Master']=test_data['Name'].str.contains('Master').astype(int)
test_data['Name_have_Col']=test_data['Name'].str.contains('Col').astype(int)
test_data['Name_have_Major']=test_data['Name'].str.contains('Major').astype(int)

features = ['Sex_bin', 'Age', 'Pclass', 'SibSp', 'Parch', 'Fare', 'Embarked_S', 'Embarked_C', 'Cabin_null', 'Name_have_Miss', 'Name_have_Mrs', 
            'Name_have_Mr', 'Name_have_Master', 'Name_have_Col', 'Name_have_Major']

"""**The 3 steps of Data Prediction:**

1 - Fit

2 - Validation

3 - Test (Prediction)

**Train Definition**
"""

X = train_data[features]
y = train_data['Survived']
print(X.head(),'\n')
print(y.head())

"""**Treat Missing**"""
X = X[features].fillna(-1)

"""**Data split between train and validation datasets**"""
np.random.seed(0)
train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.5)
print(train_X.head())

"""**Test Definition**"""

X_test=test_data[features]

"""**Treat Missing**"""
X_test = X_test[features].fillna(-1)

"""**ML model - Random Forest**

*Datasets:*

Train: train_X, train_y

Validation: val_X, val_y

Test: X_test

**Train step**
"""

##training
rf_model = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
rf_model.fit(train_X, train_y)

##prediction
rf_val_predictions = rf_model.predict(val_X)
print(rf_val_predictions)

"""**Validation step**

Compare the prediciton for validation and the real target
"""

acc=np.mean(rf_val_predictions==val_y)
print(acc)

##Comparison with the control submission (with only women)
control_predictions=(val_X['Sex_bin']==1).astype(np.int64)
print(np.mean(control_predictions==val_y))

"""**Cross Validation: *Kfold***"""

list_acc=[]

kf=RepeatedKFold(n_splits=2, n_repeats=10, random_state=10)

for l_train, l_val in kf.split(X):
  #print(l_train.shape[0], l_val.shape[0])
  train_X, val_X = X.iloc[l_train], X.iloc[l_val]
  train_y, val_y = y.iloc[l_train], y.iloc[l_val]

  ##training
  #rf_model = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
  rf_model = LogisticRegression()

  rf_model.fit(train_X, train_y)
  ##prediction
  rf_val_predictions = rf_model.predict(val_X)

  acc=np.mean(rf_val_predictions==val_y)
  list_acc.append(acc)
print(np.mean(list_acc))

print(np.mean(list_acc))

"""**Error analysis of features: Improve results**

Comparing the predicted result with the expected output in recpect of the other variables
"""

val_X_check = train_data.iloc[l_val].copy()
val_X_check['Prediction'] = rf_val_predictions
val_X_check.head()
X_errors=val_X_check[val_X_check['Survived']!=val_X_check['Prediction']]
X_errors=X_errors[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Sex_bin',
       'Embarked_bin', 'Prediction', 'Survived']]
#X_errors.describe()
X_errors.head()

X_women=X_errors[X_errors['Sex_bin']==1]
X_men=X_errors[X_errors['Sex_bin']==0]
#print(X_women.sort_values('Survived'))
print(X_men.sort_values('Survived'))

"""**Plotting results**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %pylab inline
plt.pyplot.hist(list_acc)

"""**Test step**

Including the entire train and test sets
"""

##training
#rf_model = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
rf_model = LogisticRegression()
rf_model.fit(X, y)

##prediction
rf_val_predictions = rf_model.predict(X_test)

"""**Save predictions in format used for Titanic competition scoring**"""

output = pd.DataFrame({'PassengerId': test_data.PassengerId,
                       'Survived': rf_val_predictions})

#output = pd.Series(rf_val_predictions, index=test_data['PassengerId'], name='Survived')

output.to_csv('submission.csv', header=True, index=False)
!head -n10 submission.csv
#files.download('submission.csv')